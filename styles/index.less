@import "ui-variables";
@import "syntax-variables";

@ms: 300ms;

@highlight-opacity:            0.8;
@highlight-blend-mode:         screen;
@highlight-border-radius:      2px;
@highlight-padding-vertical:   0px;
@highlight-padding-horizontal: 2px;

@overlay-shadow:               0 0 4em fade(black, 15%);
@overlay-border-radius:        2px;
@overlay-message-font-size:    0.9em;



// Highlights

.highlight .lint-annotation {
  .states;

  opacity:        @highlight-opacity;
  border-radius:  @highlight-border-radius;
  box-sizing:     content-box !important;

  // Style: Background (default)
  [highlight-style='background'] & {
    mix-blend-mode: @highlight-blend-mode;
    margin:        -@highlight-padding-vertical 0 0 -@highlight-padding-horizontal;
    padding:        @highlight-padding-vertical @highlight-padding-horizontal;
    background:     var(--background-color) }

  // Style: Bordered
  [highlight-style*='border'] & {
    border-style: solid;
    border-color: var(--border-color);
    border-width: var(--border-width, 1px) }

  // Style: Underlined
  [highlight-style*='underline'] & {
    opacity:      1;
    border-style: solid;
    border-color: var(--border-color);
    border-width: 0 0 var(--border-width, 1px) }

  // Sub: dotted borders
  [highlight-style*='dotted'] & {
    border-style: dotted }

  // Sub: bold borders
  [highlight-style*='bold'] & {
    --border-width: 2px }

}


// Overlays

.lint-annotation-overlay {
  color:            @text-color;
  box-shadow:       @overlay-shadow;
  background-color: @overlay-background-color;
  transition:       @ms transform, @ms margin-top;

  &.above {
    .message { .caret(above) }
    .message .menu .icon { transform: rotate(180deg) }
    transform: translateY(-100%);
    margin-top: -2em }

  &.below {
    .message { .caret(below) }}

  .message {
    .states;

    transition:    @ms opacity, @ms padding, @ms max-height, @ms * 2 background-color;
    max-width:     40em;
    max-height:    16em;
    opacity:       1;
    border:        1px solid var(--border-color);
    padding:       @component-padding;
    font-size:     @overlay-message-font-size;
    background:    var(--background-color);
    border-radius: 0 @overlay-border-radius @overlay-border-radius @overlay-border-radius;

    .excerpt {
      margin:  0;
      padding: 0 }

    header {
      display: flex;
    }

    header h4 {
      flex:        1 0;
      margin:      0;
      padding:     0 0 @component-padding * 0.6;
      font-weight: inherit }

    header .menu {
      flex:             0 0;
      width:            2em;
      height:           2em;
      line-height:      2em;
      display:          flex;
      align-items:      center;
      justify-content:  center }

    .menu .icon {
      color:          inherit;
      cursor:         pointer;
      z-index:        200;
      display:        block;
      position:       relative;
      background:     rgba(0, 0, 0, 0.1);
      text-align:     center;
      line-height:    inherit;
      border-radius:  50% }

    .menu .toggle::before {
      display:     block;
      color:       inherit !important;
      margin:      0;
      height:      1.4em;
      width:       1.4em;
      line-height: 1.4em }
  }


  .message.hidden {
    overflow:     hidden !important;
    display:      block !important;
    border-width: 0;
    opacity:      0;
    max-height:   0;
    padding-top:  0;
    padding-bottom: 0 }

  .message h4 {
    margin:  0;
    padding: 0 0 @component-padding * 0.6;
    font-weight: inherit }

  .message .excerpt {
    margin:  0;
    padding: 0 }
}


// Mixins

.states () {
  .bg (@col) {
    --background-color: @col;
    --border-color: var(--background-color, lighten(@col, 2%));
  }

  &           { .bg(@overlay-background-color) }
  &.info      { .bg(@text-color-info) }
  &.success   { .bg(@text-color-success) }
  &.error     { .bg(@text-color-error) }
  &.fatal     { .bg(@text-color-error) }
  &.warning   { .bg(darken(@text-color-warning, 12%)) }
  &.highlight { .bg(@background-color-highlight) }
}

.caret (@location) {
  @size:    8px;
  position: relative;

  &::before {
    content:      "";
    left:         -1px;
    display:      block;
    position:     absolute;
    border-style: solid }

  &::before when (@location = below) {
    top:          0;
    transform:    translate(0, -100%);
    border-color: transparent transparent var(--background-color);
    border-width: 0 @size @size 0 }

  &::before when (@location = above) {
    bottom:       0;
    transform:    translate(0, 100%);
    border-color: var(--background-color) transparent transparent;
    border-width: @size @size 0 0 }
}


.braces () {
  &::before { content: "(" }
  &::after  { content: ")" }
}
